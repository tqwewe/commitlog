<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="453.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="453.00"> </text><svg id="frames" x="10" width="1180" total_samples="1198"><g><title>bulk`core::ptr::drop_in_place&lt;tokio::runtime::blocking::pool::BlockingPool&gt; (1 samples, 0.08%)</title><rect x="0.0000%" y="309" width="0.0835%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>bulk`tokio::runtime::blocking::pool::BlockingPool::shutdown (1 samples, 0.08%)</title><rect x="0.0000%" y="293" width="0.0835%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvbroad (1 samples, 0.08%)</title><rect x="0.0000%" y="277" width="0.0835%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>bulk`&lt;commitlog::message::MessageIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="0.0835%" y="261" width="0.0835%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.3335%" y="271.50"></text></g><g><title>bulk`&lt;tokio::runtime::coop::with_budget::ResetGuard as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.1669%" y="261" width="0.0835%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="1"/><text x="0.4169%" y="271.50"></text></g><g><title>bulk`commitlog::index::IndexBuf::push (1 samples, 0.08%)</title><rect x="0.2504%" y="261" width="0.0835%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="1"/><text x="0.5004%" y="271.50"></text></g><g><title>bulk`commitlog::stream_index::StreamIndex::insert (1 samples, 0.08%)</title><rect x="0.3339%" y="261" width="0.0835%" height="15" fill="rgb(207,160,47)" fg:x="4" fg:w="1"/><text x="0.5839%" y="271.50"></text></g><g><title>bulk`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.17%)</title><rect x="3.3389%" y="213" width="0.1669%" height="15" fill="rgb(228,23,34)" fg:x="40" fg:w="2"/><text x="3.5889%" y="223.50"></text></g><g><title>bulk`core::fmt::num::imp::_&lt;impl core::fmt::Display for u32&gt;::fmt (1 samples, 0.08%)</title><rect x="3.5058%" y="213" width="0.0835%" height="15" fill="rgb(218,30,26)" fg:x="42" fg:w="1"/><text x="3.7558%" y="223.50"></text></g><g><title>bulk`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (8 samples, 0.67%)</title><rect x="4.9249%" y="197" width="0.6678%" height="15" fill="rgb(220,122,19)" fg:x="59" fg:w="8"/><text x="5.1749%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.25%)</title><rect x="5.3422%" y="181" width="0.2504%" height="15" fill="rgb(250,228,42)" fg:x="64" fg:w="3"/><text x="5.5922%" y="191.50"></text></g><g><title>bulk`DYLD-STUB$$memcpy (1 samples, 0.08%)</title><rect x="5.5927%" y="197" width="0.0835%" height="15" fill="rgb(240,193,28)" fg:x="67" fg:w="1"/><text x="5.8427%" y="207.50"></text></g><g><title>bulk`core::fmt::Formatter::pad_integral (1 samples, 0.08%)</title><rect x="5.6761%" y="197" width="0.0835%" height="15" fill="rgb(216,20,37)" fg:x="68" fg:w="1"/><text x="5.9261%" y="207.50"></text></g><g><title>bulk`__rdl_alloc (1 samples, 0.08%)</title><rect x="8.0134%" y="149" width="0.0835%" height="15" fill="rgb(206,188,39)" fg:x="96" fg:w="1"/><text x="8.2634%" y="159.50"></text></g><g><title>bulk`__rust_alloc (2 samples, 0.17%)</title><rect x="8.0968%" y="149" width="0.1669%" height="15" fill="rgb(217,207,13)" fg:x="97" fg:w="2"/><text x="8.3468%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_zero_on_alloc (35 samples, 2.92%)</title><rect x="8.4307%" y="133" width="2.9215%" height="15" fill="rgb(231,73,38)" fg:x="101" fg:w="35"/><text x="8.6807%" y="143.50">li..</text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.08%)</title><rect x="11.3523%" y="133" width="0.0835%" height="15" fill="rgb(225,20,46)" fg:x="136" fg:w="1"/><text x="11.6023%" y="143.50"></text></g><g><title>bulk`alloc::raw_vec::finish_grow (39 samples, 3.26%)</title><rect x="8.2638%" y="149" width="3.2554%" height="15" fill="rgb(210,31,41)" fg:x="99" fg:w="39"/><text x="8.5138%" y="159.50">bul..</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="11.4357%" y="133" width="0.0835%" height="15" fill="rgb(221,200,47)" fg:x="137" fg:w="1"/><text x="11.6857%" y="143.50"></text></g><g><title>bulk`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (48 samples, 4.01%)</title><rect x="7.6795%" y="165" width="4.0067%" height="15" fill="rgb(226,26,5)" fg:x="92" fg:w="48"/><text x="7.9295%" y="175.50">bulk..</text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.17%)</title><rect x="11.5192%" y="149" width="0.1669%" height="15" fill="rgb(249,33,26)" fg:x="138" fg:w="2"/><text x="11.7692%" y="159.50"></text></g><g><title>bulk`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (70 samples, 5.84%)</title><rect x="6.7613%" y="181" width="5.8431%" height="15" fill="rgb(235,183,28)" fg:x="81" fg:w="70"/><text x="7.0113%" y="191.50">bulk`&lt;a..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (11 samples, 0.92%)</title><rect x="11.6861%" y="165" width="0.9182%" height="15" fill="rgb(221,5,38)" fg:x="140" fg:w="11"/><text x="11.9361%" y="175.50"></text></g><g><title>bulk`core::fmt::Formatter::pad_integral (12 samples, 1.00%)</title><rect x="12.6043%" y="181" width="1.0017%" height="15" fill="rgb(247,18,42)" fg:x="151" fg:w="12"/><text x="12.8543%" y="191.50"></text></g><g><title>bulk`core::fmt::Formatter::pad_integral::write_prefix (2 samples, 0.17%)</title><rect x="13.6060%" y="181" width="0.1669%" height="15" fill="rgb(241,131,45)" fg:x="163" fg:w="2"/><text x="13.8560%" y="191.50"></text></g><g><title>bulk`core::fmt::Formatter::pad_integral (5 samples, 0.42%)</title><rect x="13.7730%" y="181" width="0.4174%" height="15" fill="rgb(249,31,29)" fg:x="165" fg:w="5"/><text x="14.0230%" y="191.50"></text></g><g><title>bulk`core::fmt::Formatter::pad_integral::write_prefix (5 samples, 0.42%)</title><rect x="13.7730%" y="165" width="0.4174%" height="15" fill="rgb(225,111,53)" fg:x="165" fg:w="5"/><text x="14.0230%" y="175.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (1 samples, 0.08%)</title><rect x="14.1903%" y="181" width="0.0835%" height="15" fill="rgb(238,160,17)" fg:x="170" fg:w="1"/><text x="14.4403%" y="191.50"></text></g><g><title>bulk`alloc::fmt::format::format_inner (147 samples, 12.27%)</title><rect x="2.2538%" y="229" width="12.2705%" height="15" fill="rgb(214,148,48)" fg:x="27" fg:w="147"/><text x="2.5038%" y="239.50">bulk`alloc::fmt::f..</text></g><g><title>bulk`core::fmt::write (131 samples, 10.93%)</title><rect x="3.5893%" y="213" width="10.9349%" height="15" fill="rgb(232,36,49)" fg:x="43" fg:w="131"/><text x="3.8393%" y="223.50">bulk`core::fmt::..</text></g><g><title>bulk`core::fmt::num::imp::_&lt;impl core::fmt::Display for u32&gt;::fmt (105 samples, 8.76%)</title><rect x="5.7596%" y="197" width="8.7646%" height="15" fill="rgb(209,103,24)" fg:x="69" fg:w="105"/><text x="6.0096%" y="207.50">bulk`core::f..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.25%)</title><rect x="14.2738%" y="181" width="0.2504%" height="15" fill="rgb(229,88,8)" fg:x="171" fg:w="3"/><text x="14.5238%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.17%)</title><rect x="14.7746%" y="149" width="0.1669%" height="15" fill="rgb(213,181,19)" fg:x="177" fg:w="2"/><text x="15.0246%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.17%)</title><rect x="14.9416%" y="149" width="0.1669%" height="15" fill="rgb(254,191,54)" fg:x="179" fg:w="2"/><text x="15.1916%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (7 samples, 0.58%)</title><rect x="14.7746%" y="165" width="0.5843%" height="15" fill="rgb(241,83,37)" fg:x="177" fg:w="7"/><text x="15.0246%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.25%)</title><rect x="15.1085%" y="149" width="0.2504%" height="15" fill="rgb(233,36,39)" fg:x="181" fg:w="3"/><text x="15.3585%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.25%)</title><rect x="15.1085%" y="133" width="0.2504%" height="15" fill="rgb(226,3,54)" fg:x="181" fg:w="3"/><text x="15.3585%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.17%)</title><rect x="15.1920%" y="117" width="0.1669%" height="15" fill="rgb(245,192,40)" fg:x="182" fg:w="2"/><text x="15.4420%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_small (3 samples, 0.25%)</title><rect x="15.3589%" y="149" width="0.2504%" height="15" fill="rgb(238,167,29)" fg:x="184" fg:w="3"/><text x="15.6089%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.08%)</title><rect x="15.5259%" y="133" width="0.0835%" height="15" fill="rgb(232,182,51)" fg:x="186" fg:w="1"/><text x="15.7759%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (1 samples, 0.08%)</title><rect x="15.6093%" y="149" width="0.0835%" height="15" fill="rgb(231,60,39)" fg:x="187" fg:w="1"/><text x="15.8593%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.17%)</title><rect x="15.6928%" y="149" width="0.1669%" height="15" fill="rgb(208,69,12)" fg:x="188" fg:w="2"/><text x="15.9428%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.17%)</title><rect x="15.6928%" y="133" width="0.1669%" height="15" fill="rgb(235,93,37)" fg:x="188" fg:w="2"/><text x="15.9428%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.08%)</title><rect x="15.7763%" y="117" width="0.0835%" height="15" fill="rgb(213,116,39)" fg:x="189" fg:w="1"/><text x="16.0263%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.08%)</title><rect x="15.8598%" y="149" width="0.0835%" height="15" fill="rgb(222,207,29)" fg:x="190" fg:w="1"/><text x="16.1098%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.08%)</title><rect x="15.8598%" y="133" width="0.0835%" height="15" fill="rgb(206,96,30)" fg:x="190" fg:w="1"/><text x="16.1098%" y="143.50"></text></g><g><title>bulk`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (18 samples, 1.50%)</title><rect x="14.5242%" y="229" width="1.5025%" height="15" fill="rgb(218,138,4)" fg:x="174" fg:w="18"/><text x="14.7742%" y="239.50"></text></g><g><title>bulk`alloc::raw_vec::finish_grow (16 samples, 1.34%)</title><rect x="14.6912%" y="213" width="1.3356%" height="15" fill="rgb(250,191,14)" fg:x="176" fg:w="16"/><text x="14.9412%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (15 samples, 1.25%)</title><rect x="14.7746%" y="197" width="1.2521%" height="15" fill="rgb(239,60,40)" fg:x="177" fg:w="15"/><text x="15.0246%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (15 samples, 1.25%)</title><rect x="14.7746%" y="181" width="1.2521%" height="15" fill="rgb(206,27,48)" fg:x="177" fg:w="15"/><text x="15.0246%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (8 samples, 0.67%)</title><rect x="15.3589%" y="165" width="0.6678%" height="15" fill="rgb(225,35,8)" fg:x="184" fg:w="8"/><text x="15.6089%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="15.9432%" y="149" width="0.0835%" height="15" fill="rgb(250,213,24)" fg:x="191" fg:w="1"/><text x="16.1932%" y="159.50"></text></g><g><title>bulk`core::fmt::write (1 samples, 0.08%)</title><rect x="16.0267%" y="229" width="0.0835%" height="15" fill="rgb(247,123,22)" fg:x="192" fg:w="1"/><text x="16.2767%" y="239.50"></text></g><g><title>bulk`core::iter::traits::iterator::Iterator::fold (6 samples, 0.50%)</title><rect x="16.1102%" y="229" width="0.5008%" height="15" fill="rgb(231,138,38)" fg:x="193" fg:w="6"/><text x="16.3602%" y="239.50"></text></g><g><title>bulk`core::iter::traits::iterator::Iterator::fold (11 samples, 0.92%)</title><rect x="20.7012%" y="213" width="0.9182%" height="15" fill="rgb(231,145,46)" fg:x="248" fg:w="11"/><text x="20.9512%" y="223.50"></text></g><g><title>bulk`crc32c::hw_x86_64::crc32c (63 samples, 5.26%)</title><rect x="16.6110%" y="229" width="5.2588%" height="15" fill="rgb(251,118,11)" fg:x="199" fg:w="63"/><text x="16.8610%" y="239.50">bulk`c..</text></g><g><title>bulk`crc32c::hw_x86_64::crc_u8_append (3 samples, 0.25%)</title><rect x="21.6194%" y="213" width="0.2504%" height="15" fill="rgb(217,147,25)" fg:x="259" fg:w="3"/><text x="21.8694%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (55 samples, 4.59%)</title><rect x="21.8698%" y="229" width="4.5910%" height="15" fill="rgb(247,81,37)" fg:x="262" fg:w="55"/><text x="22.1198%" y="239.50">libsy..</text></g><g><title>bulk`&lt;commitlog::message::MessageBuf as core::iter::traits::collect::FromIterator&lt;R&gt;&gt;::from_iter (309 samples, 25.79%)</title><rect x="1.0017%" y="245" width="25.7930%" height="15" fill="rgb(209,12,38)" fg:x="12" fg:w="309"/><text x="1.2517%" y="255.50">bulk`&lt;commitlog::message::MessageBuf as c..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.33%)</title><rect x="26.4608%" y="229" width="0.3339%" height="15" fill="rgb(227,1,9)" fg:x="317" fg:w="4"/><text x="26.7108%" y="239.50"></text></g><g><title>bulk`&lt;commitlog::message::MessageIter as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 1.50%)</title><rect x="26.7947%" y="245" width="1.5025%" height="15" fill="rgb(248,47,43)" fg:x="321" fg:w="18"/><text x="27.0447%" y="255.50"></text></g><g><title>bulk`&lt;commitlog::message::MessageMutIter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.33%)</title><rect x="28.2972%" y="245" width="0.3339%" height="15" fill="rgb(221,10,30)" fg:x="339" fg:w="4"/><text x="28.5472%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (10 samples, 0.83%)</title><rect x="28.6311%" y="181" width="0.8347%" height="15" fill="rgb(210,229,1)" fg:x="343" fg:w="10"/><text x="28.8811%" y="191.50"></text></g><g><title>bulk`tokio::runtime::blocking::pool::Spawner::spawn_task (11 samples, 0.92%)</title><rect x="28.6311%" y="197" width="0.9182%" height="15" fill="rgb(222,148,37)" fg:x="343" fg:w="11"/><text x="28.8811%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.08%)</title><rect x="29.4658%" y="181" width="0.0835%" height="15" fill="rgb(234,67,33)" fg:x="353" fg:w="1"/><text x="29.7158%" y="191.50"></text></g><g><title>bulk`tokio::runtime::blocking::pool::spawn_blocking (12 samples, 1.00%)</title><rect x="28.6311%" y="229" width="1.0017%" height="15" fill="rgb(247,98,35)" fg:x="343" fg:w="12"/><text x="28.8811%" y="239.50"></text></g><g><title>bulk`tokio::runtime::blocking::pool::Spawner::spawn_blocking (12 samples, 1.00%)</title><rect x="28.6311%" y="213" width="1.0017%" height="15" fill="rgb(247,138,52)" fg:x="343" fg:w="12"/><text x="28.8811%" y="223.50"></text></g><g><title>bulk`tokio::runtime::task::raw::RawTask::new (1 samples, 0.08%)</title><rect x="29.5492%" y="197" width="0.0835%" height="15" fill="rgb(213,79,30)" fg:x="354" fg:w="1"/><text x="29.7992%" y="207.50"></text></g><g><title>bulk`__rdl_alloc (1 samples, 0.08%)</title><rect x="29.5492%" y="181" width="0.0835%" height="15" fill="rgb(246,177,23)" fg:x="354" fg:w="1"/><text x="29.7992%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_posix_memalign (1 samples, 0.08%)</title><rect x="29.5492%" y="165" width="0.0835%" height="15" fill="rgb(230,62,27)" fg:x="354" fg:w="1"/><text x="29.7992%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_memalign (1 samples, 0.08%)</title><rect x="29.5492%" y="149" width="0.0835%" height="15" fill="rgb(216,154,8)" fg:x="354" fg:w="1"/><text x="29.7992%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_memalign (1 samples, 0.08%)</title><rect x="29.5492%" y="133" width="0.0835%" height="15" fill="rgb(244,35,45)" fg:x="354" fg:w="1"/><text x="29.7992%" y="143.50"></text></g><g><title>bulk`&lt;tokio::fs::file::File as tokio::io::async_read::AsyncRead&gt;::poll_read (23 samples, 1.92%)</title><rect x="28.6311%" y="245" width="1.9199%" height="15" fill="rgb(251,115,12)" fg:x="343" fg:w="23"/><text x="28.8811%" y="255.50">b..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (11 samples, 0.92%)</title><rect x="29.6327%" y="229" width="0.9182%" height="15" fill="rgb(240,54,50)" fg:x="355" fg:w="11"/><text x="29.8827%" y="239.50"></text></g><g><title>bulk`tokio::runtime::task::raw::try_read_output (1 samples, 0.08%)</title><rect x="30.6344%" y="213" width="0.0835%" height="15" fill="rgb(233,84,52)" fg:x="367" fg:w="1"/><text x="30.8844%" y="223.50"></text></g><g><title>bulk`&lt;tokio::fs::file::File as tokio::io::async_seek::AsyncSeek&gt;::poll_complete (3 samples, 0.25%)</title><rect x="30.5509%" y="229" width="0.2504%" height="15" fill="rgb(207,117,47)" fg:x="366" fg:w="3"/><text x="30.8009%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.08%)</title><rect x="30.7179%" y="213" width="0.0835%" height="15" fill="rgb(249,43,39)" fg:x="368" fg:w="1"/><text x="30.9679%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (7 samples, 0.58%)</title><rect x="30.8848%" y="165" width="0.5843%" height="15" fill="rgb(209,38,44)" fg:x="370" fg:w="7"/><text x="31.1348%" y="175.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (1 samples, 0.08%)</title><rect x="31.4691%" y="165" width="0.0835%" height="15" fill="rgb(236,212,23)" fg:x="377" fg:w="1"/><text x="31.7191%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (1 samples, 0.08%)</title><rect x="31.4691%" y="149" width="0.0835%" height="15" fill="rgb(242,79,21)" fg:x="377" fg:w="1"/><text x="31.7191%" y="159.50"></text></g><g><title>bulk`&lt;tokio::io::util::buf_writer::BufWriter&lt;W&gt; as tokio::io::async_seek::AsyncSeek&gt;::poll_complete (13 samples, 1.09%)</title><rect x="30.5509%" y="245" width="1.0851%" height="15" fill="rgb(211,96,35)" fg:x="366" fg:w="13"/><text x="30.8009%" y="255.50"></text></g><g><title>bulk`&lt;tokio::fs::file::File as tokio::io::async_seek::AsyncSeek&gt;::start_seek (10 samples, 0.83%)</title><rect x="30.8013%" y="229" width="0.8347%" height="15" fill="rgb(253,215,40)" fg:x="369" fg:w="10"/><text x="31.0513%" y="239.50"></text></g><g><title>bulk`tokio::runtime::blocking::pool::spawn_blocking (10 samples, 0.83%)</title><rect x="30.8013%" y="213" width="0.8347%" height="15" fill="rgb(211,81,21)" fg:x="369" fg:w="10"/><text x="31.0513%" y="223.50"></text></g><g><title>bulk`tokio::runtime::blocking::pool::Spawner::spawn_blocking (10 samples, 0.83%)</title><rect x="30.8013%" y="197" width="0.8347%" height="15" fill="rgb(208,190,38)" fg:x="369" fg:w="10"/><text x="31.0513%" y="207.50"></text></g><g><title>bulk`tokio::runtime::blocking::pool::Spawner::spawn_task (10 samples, 0.83%)</title><rect x="30.8013%" y="181" width="0.8347%" height="15" fill="rgb(235,213,38)" fg:x="369" fg:w="10"/><text x="31.0513%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (1 samples, 0.08%)</title><rect x="31.5526%" y="165" width="0.0835%" height="15" fill="rgb(237,122,38)" fg:x="378" fg:w="1"/><text x="31.8026%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (11 samples, 0.92%)</title><rect x="32.0534%" y="165" width="0.9182%" height="15" fill="rgb(244,218,35)" fg:x="384" fg:w="11"/><text x="32.3034%" y="175.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (1 samples, 0.08%)</title><rect x="32.9716%" y="165" width="0.0835%" height="15" fill="rgb(240,68,47)" fg:x="395" fg:w="1"/><text x="33.2216%" y="175.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (1 samples, 0.08%)</title><rect x="32.9716%" y="149" width="0.0835%" height="15" fill="rgb(210,16,53)" fg:x="395" fg:w="1"/><text x="33.2216%" y="159.50"></text></g><g><title>bulk`tokio::runtime::blocking::pool::Spawner::spawn_task (13 samples, 1.09%)</title><rect x="32.0534%" y="181" width="1.0851%" height="15" fill="rgb(235,124,12)" fg:x="384" fg:w="13"/><text x="32.3034%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (1 samples, 0.08%)</title><rect x="33.0551%" y="165" width="0.0835%" height="15" fill="rgb(224,169,11)" fg:x="396" fg:w="1"/><text x="33.3051%" y="175.50"></text></g><g><title>bulk`tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (19 samples, 1.59%)</title><rect x="31.6361%" y="229" width="1.5860%" height="15" fill="rgb(250,166,2)" fg:x="379" fg:w="19"/><text x="31.8861%" y="239.50"></text></g><g><title>bulk`&lt;tokio::fs::file::File as tokio::io::async_write::AsyncWrite&gt;::poll_write (19 samples, 1.59%)</title><rect x="31.6361%" y="213" width="1.5860%" height="15" fill="rgb(242,216,29)" fg:x="379" fg:w="19"/><text x="31.8861%" y="223.50"></text></g><g><title>bulk`tokio::runtime::blocking::pool::spawn_mandatory_blocking (15 samples, 1.25%)</title><rect x="31.9699%" y="197" width="1.2521%" height="15" fill="rgb(230,116,27)" fg:x="383" fg:w="15"/><text x="32.2199%" y="207.50"></text></g><g><title>bulk`tokio::runtime::task::raw::RawTask::new (1 samples, 0.08%)</title><rect x="33.1386%" y="181" width="0.0835%" height="15" fill="rgb(228,99,48)" fg:x="397" fg:w="1"/><text x="33.3886%" y="191.50"></text></g><g><title>bulk`__rdl_alloc (1 samples, 0.08%)</title><rect x="33.1386%" y="165" width="0.0835%" height="15" fill="rgb(253,11,6)" fg:x="397" fg:w="1"/><text x="33.3886%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_posix_memalign (1 samples, 0.08%)</title><rect x="33.1386%" y="149" width="0.0835%" height="15" fill="rgb(247,143,39)" fg:x="397" fg:w="1"/><text x="33.3886%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_memalign (1 samples, 0.08%)</title><rect x="33.1386%" y="133" width="0.0835%" height="15" fill="rgb(236,97,10)" fg:x="397" fg:w="1"/><text x="33.3886%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_memalign (1 samples, 0.08%)</title><rect x="33.1386%" y="117" width="0.0835%" height="15" fill="rgb(233,208,19)" fg:x="397" fg:w="1"/><text x="33.3886%" y="127.50"></text></g><g><title>bulk`&lt;tokio::io::util::write_all::WriteAll&lt;W&gt; as core::future::future::Future&gt;::poll (20 samples, 1.67%)</title><rect x="31.6361%" y="245" width="1.6694%" height="15" fill="rgb(216,164,2)" fg:x="379" fg:w="20"/><text x="31.8861%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="33.2220%" y="229" width="0.0835%" height="15" fill="rgb(220,129,5)" fg:x="398" fg:w="1"/><text x="33.4720%" y="239.50"></text></g><g><title>bulk`__rdl_dealloc (1 samples, 0.08%)</title><rect x="33.3055%" y="245" width="0.0835%" height="15" fill="rgb(242,17,10)" fg:x="399" fg:w="1"/><text x="33.5555%" y="255.50"></text></g><g><title>bulk`__rust_dealloc (1 samples, 0.08%)</title><rect x="33.3890%" y="245" width="0.0835%" height="15" fill="rgb(242,107,0)" fg:x="400" fg:w="1"/><text x="33.6390%" y="255.50"></text></g><g><title>bulk`memmap2::os::MmapInner::map_mut (2 samples, 0.17%)</title><rect x="33.4725%" y="181" width="0.1669%" height="15" fill="rgb(251,28,31)" fg:x="401" fg:w="2"/><text x="33.7225%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__mmap (2 samples, 0.17%)</title><rect x="33.4725%" y="165" width="0.1669%" height="15" fill="rgb(233,223,10)" fg:x="401" fg:w="2"/><text x="33.7225%" y="175.50"></text></g><g><title>bulk`std::path::PathBuf::_push (1 samples, 0.08%)</title><rect x="33.6394%" y="181" width="0.0835%" height="15" fill="rgb(215,21,27)" fg:x="403" fg:w="1"/><text x="33.8894%" y="191.50"></text></g><g><title>bulk`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="33.6394%" y="165" width="0.0835%" height="15" fill="rgb(232,23,21)" fg:x="403" fg:w="1"/><text x="33.8894%" y="175.50"></text></g><g><title>bulk`alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.6394%" y="149" width="0.0835%" height="15" fill="rgb(244,5,23)" fg:x="403" fg:w="1"/><text x="33.8894%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.08%)</title><rect x="33.6394%" y="133" width="0.0835%" height="15" fill="rgb(226,81,46)" fg:x="403" fg:w="1"/><text x="33.8894%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.08%)</title><rect x="33.6394%" y="117" width="0.0835%" height="15" fill="rgb(247,70,30)" fg:x="403" fg:w="1"/><text x="33.8894%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.08%)</title><rect x="33.6394%" y="101" width="0.0835%" height="15" fill="rgb(212,68,19)" fg:x="403" fg:w="1"/><text x="33.8894%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.08%)</title><rect x="33.6394%" y="85" width="0.0835%" height="15" fill="rgb(240,187,13)" fg:x="403" fg:w="1"/><text x="33.8894%" y="95.50"></text></g><g><title>bulk`tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.08%)</title><rect x="33.7229%" y="133" width="0.0835%" height="15" fill="rgb(223,113,26)" fg:x="404" fg:w="1"/><text x="33.9729%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (1 samples, 0.08%)</title><rect x="33.7229%" y="117" width="0.0835%" height="15" fill="rgb(206,192,2)" fg:x="404" fg:w="1"/><text x="33.9729%" y="127.50"></text></g><g><title>bulk`&lt;tokio::future::maybe_done::MaybeDone&lt;Fut&gt; as core::future::future::Future&gt;::poll (5 samples, 0.42%)</title><rect x="33.4725%" y="197" width="0.4174%" height="15" fill="rgb(241,108,4)" fg:x="401" fg:w="5"/><text x="33.7225%" y="207.50"></text></g><g><title>bulk`tokio::fs::open_options::OpenOptions::open::_{{closure}} (2 samples, 0.17%)</title><rect x="33.7229%" y="181" width="0.1669%" height="15" fill="rgb(247,173,49)" fg:x="404" fg:w="2"/><text x="33.9729%" y="191.50"></text></g><g><title>bulk`tokio::runtime::blocking::pool::spawn_blocking (2 samples, 0.17%)</title><rect x="33.7229%" y="165" width="0.1669%" height="15" fill="rgb(224,114,35)" fg:x="404" fg:w="2"/><text x="33.9729%" y="175.50"></text></g><g><title>bulk`tokio::runtime::blocking::pool::Spawner::spawn_blocking (2 samples, 0.17%)</title><rect x="33.7229%" y="149" width="0.1669%" height="15" fill="rgb(245,159,27)" fg:x="404" fg:w="2"/><text x="33.9729%" y="159.50"></text></g><g><title>bulk`tokio::runtime::task::raw::RawTask::new (1 samples, 0.08%)</title><rect x="33.8063%" y="133" width="0.0835%" height="15" fill="rgb(245,172,44)" fg:x="405" fg:w="1"/><text x="34.0563%" y="143.50"></text></g><g><title>bulk`__rdl_alloc (1 samples, 0.08%)</title><rect x="33.8063%" y="117" width="0.0835%" height="15" fill="rgb(236,23,11)" fg:x="405" fg:w="1"/><text x="34.0563%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_posix_memalign (1 samples, 0.08%)</title><rect x="33.8063%" y="101" width="0.0835%" height="15" fill="rgb(205,117,38)" fg:x="405" fg:w="1"/><text x="34.0563%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_memalign (1 samples, 0.08%)</title><rect x="33.8063%" y="85" width="0.0835%" height="15" fill="rgb(237,72,25)" fg:x="405" fg:w="1"/><text x="34.0563%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_memalign (1 samples, 0.08%)</title><rect x="33.8063%" y="69" width="0.0835%" height="15" fill="rgb(244,70,9)" fg:x="405" fg:w="1"/><text x="34.0563%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.08%)</title><rect x="33.8063%" y="53" width="0.0835%" height="15" fill="rgb(217,125,39)" fg:x="405" fg:w="1"/><text x="34.0563%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.08%)</title><rect x="33.8063%" y="37" width="0.0835%" height="15" fill="rgb(235,36,10)" fg:x="405" fg:w="1"/><text x="34.0563%" y="47.50"></text></g><g><title>bulk`commitlog::file_set::SegmentSet::new::_{{closure}} (6 samples, 0.50%)</title><rect x="33.4725%" y="229" width="0.5008%" height="15" fill="rgb(251,123,47)" fg:x="401" fg:w="6"/><text x="33.7225%" y="239.50"></text></g><g><title>bulk`&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (6 samples, 0.50%)</title><rect x="33.4725%" y="213" width="0.5008%" height="15" fill="rgb(221,13,13)" fg:x="401" fg:w="6"/><text x="33.7225%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_try_free_default (1 samples, 0.08%)</title><rect x="33.8898%" y="197" width="0.0835%" height="15" fill="rgb(238,131,9)" fg:x="406" fg:w="1"/><text x="34.1398%" y="207.50"></text></g><g><title>bulk`commitlog::index::Index::set_readonly::_{{closure}} (1 samples, 0.08%)</title><rect x="33.9733%" y="229" width="0.0835%" height="15" fill="rgb(211,50,8)" fg:x="407" fg:w="1"/><text x="34.2233%" y="239.50"></text></g><g><title>bulk`commitlog::index::Index::flush::_{{closure}} (1 samples, 0.08%)</title><rect x="33.9733%" y="213" width="0.0835%" height="15" fill="rgb(245,182,24)" fg:x="407" fg:w="1"/><text x="34.2233%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__msync (1 samples, 0.08%)</title><rect x="33.9733%" y="197" width="0.0835%" height="15" fill="rgb(242,14,37)" fg:x="407" fg:w="1"/><text x="34.2233%" y="207.50"></text></g><g><title>bulk`commitlog::file_set::FileSet::roll_segment::_{{closure}} (21 samples, 1.75%)</title><rect x="33.4725%" y="245" width="1.7529%" height="15" fill="rgb(246,228,12)" fg:x="401" fg:w="21"/><text x="33.7225%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__msync (14 samples, 1.17%)</title><rect x="34.0568%" y="229" width="1.1686%" height="15" fill="rgb(213,55,15)" fg:x="408" fg:w="14"/><text x="34.3068%" y="239.50"></text></g><g><title>bulk`commitlog::index::Index::find_segment_range (8 samples, 0.67%)</title><rect x="35.2254%" y="245" width="0.6678%" height="15" fill="rgb(209,9,3)" fg:x="422" fg:w="8"/><text x="35.4754%" y="255.50"></text></g><g><title>bulk`commitlog::index::Index::flush::_{{closure}} (1 samples, 0.08%)</title><rect x="35.8932%" y="245" width="0.0835%" height="15" fill="rgb(230,59,30)" fg:x="430" fg:w="1"/><text x="36.1432%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__msync (1 samples, 0.08%)</title><rect x="35.8932%" y="229" width="0.0835%" height="15" fill="rgb(209,121,21)" fg:x="430" fg:w="1"/><text x="36.1432%" y="239.50"></text></g><g><title>bulk`commitlog::index::IndexBuf::new (1 samples, 0.08%)</title><rect x="35.9766%" y="245" width="0.0835%" height="15" fill="rgb(220,109,13)" fg:x="431" fg:w="1"/><text x="36.2266%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.08%)</title><rect x="35.9766%" y="229" width="0.0835%" height="15" fill="rgb(232,18,1)" fg:x="431" fg:w="1"/><text x="36.2266%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.08%)</title><rect x="35.9766%" y="213" width="0.0835%" height="15" fill="rgb(215,41,42)" fg:x="431" fg:w="1"/><text x="36.2266%" y="223.50"></text></g><g><title>bulk`core::iter::traits::iterator::Iterator::fold (4 samples, 0.33%)</title><rect x="38.3139%" y="213" width="0.3339%" height="15" fill="rgb(224,123,36)" fg:x="459" fg:w="4"/><text x="38.5639%" y="223.50"></text></g><g><title>bulk`crc32c::hw_x86_64::crc32c (30 samples, 2.50%)</title><rect x="36.3105%" y="229" width="2.5042%" height="15" fill="rgb(240,125,3)" fg:x="435" fg:w="30"/><text x="36.5605%" y="239.50">bu..</text></g><g><title>bulk`crc32c::hw_x86_64::crc_u8_append (2 samples, 0.17%)</title><rect x="38.6477%" y="213" width="0.1669%" height="15" fill="rgb(205,98,50)" fg:x="463" fg:w="2"/><text x="38.8977%" y="223.50"></text></g><g><title>bulk`commitlog::message::MessageBuf::from_bytes (38 samples, 3.17%)</title><rect x="36.0601%" y="245" width="3.1720%" height="15" fill="rgb(205,185,37)" fg:x="432" fg:w="38"/><text x="36.3101%" y="255.50">bul..</text></g><g><title>bulk`crc32c::hw_x86_64::crc_u8_append (5 samples, 0.42%)</title><rect x="38.8147%" y="229" width="0.4174%" height="15" fill="rgb(238,207,15)" fg:x="465" fg:w="5"/><text x="39.0647%" y="239.50"></text></g><g><title>bulk`DYLD-STUB$$__bzero (1 samples, 0.08%)</title><rect x="41.8197%" y="229" width="0.0835%" height="15" fill="rgb(213,199,42)" fg:x="501" fg:w="1"/><text x="42.0697%" y="239.50"></text></g><g><title>bulk`__rust_dealloc (1 samples, 0.08%)</title><rect x="41.9032%" y="229" width="0.0835%" height="15" fill="rgb(235,201,11)" fg:x="502" fg:w="1"/><text x="42.1532%" y="239.50"></text></g><g><title>bulk`__rdl_alloc (4 samples, 0.33%)</title><rect x="44.8247%" y="213" width="0.3339%" height="15" fill="rgb(207,46,11)" fg:x="537" fg:w="4"/><text x="45.0747%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_zero_on_alloc (47 samples, 3.92%)</title><rect x="46.4107%" y="197" width="3.9232%" height="15" fill="rgb(241,35,35)" fg:x="556" fg:w="47"/><text x="46.6607%" y="207.50">libs..</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (5 samples, 0.42%)</title><rect x="49.9165%" y="181" width="0.4174%" height="15" fill="rgb(243,32,47)" fg:x="598" fg:w="5"/><text x="50.1665%" y="191.50"></text></g><g><title>bulk`twox_hash::xxh3::Hash64::with_seed (65 samples, 5.43%)</title><rect x="45.1586%" y="213" width="5.4257%" height="15" fill="rgb(247,202,23)" fg:x="541" fg:w="65"/><text x="45.4086%" y="223.50">bulk`tw..</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (3 samples, 0.25%)</title><rect x="50.3339%" y="197" width="0.2504%" height="15" fill="rgb(219,102,11)" fg:x="603" fg:w="3"/><text x="50.5839%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.58%)</title><rect x="50.5843%" y="213" width="0.5843%" height="15" fill="rgb(243,110,44)" fg:x="606" fg:w="7"/><text x="50.8343%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (33 samples, 2.75%)</title><rect x="51.1686%" y="213" width="2.7546%" height="15" fill="rgb(222,74,54)" fg:x="613" fg:w="33"/><text x="51.4186%" y="223.50">li..</text></g><g><title>bulk`commitlog::stream_index::StreamIndex::calculate_offset (145 samples, 12.10%)</title><rect x="41.9866%" y="229" width="12.1035%" height="15" fill="rgb(216,99,12)" fg:x="503" fg:w="145"/><text x="42.2366%" y="239.50">bulk`commitlog::st..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.17%)</title><rect x="53.9232%" y="213" width="0.1669%" height="15" fill="rgb(226,22,26)" fg:x="646" fg:w="2"/><text x="54.1732%" y="223.50"></text></g><g><title>bulk`__rdl_alloc (4 samples, 0.33%)</title><rect x="58.1803%" y="197" width="0.3339%" height="15" fill="rgb(217,163,10)" fg:x="697" fg:w="4"/><text x="58.4303%" y="207.50"></text></g><g><title>bulk`__rust_alloc (1 samples, 0.08%)</title><rect x="58.5142%" y="197" width="0.0835%" height="15" fill="rgb(213,25,53)" fg:x="701" fg:w="1"/><text x="58.7642%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.08%)</title><rect x="59.5159%" y="181" width="0.0835%" height="15" fill="rgb(252,105,26)" fg:x="713" fg:w="1"/><text x="59.7659%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_zero_on_alloc (37 samples, 3.09%)</title><rect x="59.5993%" y="181" width="3.0885%" height="15" fill="rgb(220,39,43)" fg:x="714" fg:w="37"/><text x="59.8493%" y="191.50">lib..</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (5 samples, 0.42%)</title><rect x="62.2705%" y="165" width="0.4174%" height="15" fill="rgb(229,68,48)" fg:x="746" fg:w="5"/><text x="62.5205%" y="175.50"></text></g><g><title>bulk`twox_hash::xxh3::Hash64::with_seed (52 samples, 4.34%)</title><rect x="58.5977%" y="197" width="4.3406%" height="15" fill="rgb(252,8,32)" fg:x="702" fg:w="52"/><text x="58.8477%" y="207.50">bulk`..</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (3 samples, 0.25%)</title><rect x="62.6878%" y="181" width="0.2504%" height="15" fill="rgb(223,20,43)" fg:x="751" fg:w="3"/><text x="62.9378%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.17%)</title><rect x="62.9382%" y="197" width="0.1669%" height="15" fill="rgb(229,81,49)" fg:x="754" fg:w="2"/><text x="63.1882%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (33 samples, 2.75%)</title><rect x="63.1052%" y="197" width="2.7546%" height="15" fill="rgb(236,28,36)" fg:x="756" fg:w="33"/><text x="63.3552%" y="207.50">li..</text></g><g><title>bulk`commitlog::stream_index::StreamIndex::calculate_offset (128 samples, 10.68%)</title><rect x="55.4257%" y="213" width="10.6845%" height="15" fill="rgb(249,185,26)" fg:x="664" fg:w="128"/><text x="55.6757%" y="223.50">bulk`commitlog::..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.25%)</title><rect x="65.8598%" y="197" width="0.2504%" height="15" fill="rgb(249,174,33)" fg:x="789" fg:w="3"/><text x="66.1098%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_free (2 samples, 0.17%)</title><rect x="66.1102%" y="213" width="0.1669%" height="15" fill="rgb(233,201,37)" fg:x="792" fg:w="2"/><text x="66.3602%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.17%)</title><rect x="66.2771%" y="213" width="0.1669%" height="15" fill="rgb(221,78,26)" fg:x="794" fg:w="2"/><text x="66.5271%" y="223.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (1 samples, 0.08%)</title><rect x="66.4441%" y="213" width="0.0835%" height="15" fill="rgb(250,127,30)" fg:x="796" fg:w="1"/><text x="66.6941%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (10 samples, 0.83%)</title><rect x="66.5275%" y="213" width="0.8347%" height="15" fill="rgb(230,49,44)" fg:x="797" fg:w="10"/><text x="66.7775%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (12 samples, 1.00%)</title><rect x="67.3623%" y="213" width="1.0017%" height="15" fill="rgb(229,67,23)" fg:x="807" fg:w="12"/><text x="67.6123%" y="223.50"></text></g><g><title>bulk`commitlog::stream_index::StreamIndex::find_key_offset (175 samples, 14.61%)</title><rect x="54.0902%" y="229" width="14.6077%" height="15" fill="rgb(249,83,47)" fg:x="648" fg:w="175"/><text x="54.3402%" y="239.50">bulk`commitlog::stream..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.33%)</title><rect x="68.3639%" y="213" width="0.3339%" height="15" fill="rgb(215,43,3)" fg:x="819" fg:w="4"/><text x="68.6139%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.08%)</title><rect x="68.6978%" y="229" width="0.0835%" height="15" fill="rgb(238,154,13)" fg:x="823" fg:w="1"/><text x="68.9478%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.25%)</title><rect x="68.7813%" y="229" width="0.2504%" height="15" fill="rgb(219,56,2)" fg:x="824" fg:w="3"/><text x="69.0313%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.08%)</title><rect x="69.0317%" y="229" width="0.0835%" height="15" fill="rgb(233,0,4)" fg:x="827" fg:w="1"/><text x="69.2817%" y="239.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (1 samples, 0.08%)</title><rect x="69.1152%" y="229" width="0.0835%" height="15" fill="rgb(235,30,7)" fg:x="828" fg:w="1"/><text x="69.3652%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (5 samples, 0.42%)</title><rect x="69.1987%" y="229" width="0.4174%" height="15" fill="rgb(250,79,13)" fg:x="829" fg:w="5"/><text x="69.4487%" y="239.50"></text></g><g><title>bulk`commitlog::stream_index::StreamIndex::insert (368 samples, 30.72%)</title><rect x="39.2321%" y="245" width="30.7179%" height="15" fill="rgb(211,146,34)" fg:x="470" fg:w="368"/><text x="39.4821%" y="255.50">bulk`commitlog::stream_index::StreamIndex::insert</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.33%)</title><rect x="69.6160%" y="229" width="0.3339%" height="15" fill="rgb(228,22,38)" fg:x="834" fg:w="4"/><text x="69.8660%" y="239.50"></text></g><g><title>bulk`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.9499%" y="213" width="0.0835%" height="15" fill="rgb(235,168,5)" fg:x="838" fg:w="1"/><text x="70.1999%" y="223.50"></text></g><g><title>bulk`core::ptr::drop_in_place&lt;commitlog::file_set::SegmentSet&gt; (1 samples, 0.08%)</title><rect x="69.9499%" y="197" width="0.0835%" height="15" fill="rgb(221,155,16)" fg:x="838" fg:w="1"/><text x="70.1999%" y="207.50"></text></g><g><title>bulk`core::ptr::drop_in_place&lt;tokio::fs::file::File&gt; (1 samples, 0.08%)</title><rect x="69.9499%" y="181" width="0.0835%" height="15" fill="rgb(215,215,53)" fg:x="838" fg:w="1"/><text x="70.1999%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__close_nocancel (1 samples, 0.08%)</title><rect x="69.9499%" y="165" width="0.0835%" height="15" fill="rgb(223,4,10)" fg:x="838" fg:w="1"/><text x="70.1999%" y="175.50"></text></g><g><title>bulk`core::ptr::drop_in_place&lt;commitlog::CommitLog&gt; (2 samples, 0.17%)</title><rect x="69.9499%" y="245" width="0.1669%" height="15" fill="rgb(234,103,6)" fg:x="838" fg:w="2"/><text x="70.1999%" y="255.50"></text></g><g><title>bulk`core::ptr::drop_in_place&lt;commitlog::file_set::FileSet&gt; (2 samples, 0.17%)</title><rect x="69.9499%" y="229" width="0.1669%" height="15" fill="rgb(227,97,0)" fg:x="838" fg:w="2"/><text x="70.1999%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__munmap (1 samples, 0.08%)</title><rect x="70.0334%" y="213" width="0.0835%" height="15" fill="rgb(234,150,53)" fg:x="839" fg:w="1"/><text x="70.2834%" y="223.50"></text></g><g><title>bulk`crc32c::hw_x86_64::crc32c (2 samples, 0.17%)</title><rect x="70.1169%" y="245" width="0.1669%" height="15" fill="rgb(228,201,54)" fg:x="840" fg:w="2"/><text x="70.3669%" y="255.50"></text></g><g><title>bulk`memmap2::MmapMut::map_anon (1 samples, 0.08%)</title><rect x="70.2838%" y="245" width="0.0835%" height="15" fill="rgb(222,22,37)" fg:x="842" fg:w="1"/><text x="70.5338%" y="255.50"></text></g><g><title>bulk`tokio::fs::file::File::set_len::_{{closure}} (1 samples, 0.08%)</title><rect x="70.3673%" y="245" width="0.0835%" height="15" fill="rgb(237,53,32)" fg:x="843" fg:w="1"/><text x="70.6173%" y="255.50"></text></g><g><title>bulk`tokio::runtime::blocking::pool::spawn_blocking (1 samples, 0.08%)</title><rect x="70.3673%" y="229" width="0.0835%" height="15" fill="rgb(233,25,53)" fg:x="843" fg:w="1"/><text x="70.6173%" y="239.50"></text></g><g><title>bulk`tokio::runtime::blocking::pool::Spawner::spawn_blocking (1 samples, 0.08%)</title><rect x="70.3673%" y="213" width="0.0835%" height="15" fill="rgb(210,40,34)" fg:x="843" fg:w="1"/><text x="70.6173%" y="223.50"></text></g><g><title>bulk`tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.08%)</title><rect x="70.3673%" y="197" width="0.0835%" height="15" fill="rgb(241,220,44)" fg:x="843" fg:w="1"/><text x="70.6173%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (1 samples, 0.08%)</title><rect x="70.3673%" y="181" width="0.0835%" height="15" fill="rgb(235,28,35)" fg:x="843" fg:w="1"/><text x="70.6173%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__msync (1 samples, 0.08%)</title><rect x="70.4508%" y="245" width="0.0835%" height="15" fill="rgb(210,56,17)" fg:x="844" fg:w="1"/><text x="70.7008%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_free (4 samples, 0.33%)</title><rect x="70.5342%" y="245" width="0.3339%" height="15" fill="rgb(224,130,29)" fg:x="845" fg:w="4"/><text x="70.7842%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="70.8681%" y="245" width="0.0835%" height="15" fill="rgb(235,212,8)" fg:x="849" fg:w="1"/><text x="71.1181%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.17%)</title><rect x="70.9516%" y="245" width="0.1669%" height="15" fill="rgb(223,33,50)" fg:x="850" fg:w="2"/><text x="71.2016%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.08%)</title><rect x="71.1185%" y="245" width="0.0835%" height="15" fill="rgb(219,149,13)" fg:x="852" fg:w="1"/><text x="71.3685%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.08%)</title><rect x="71.2020%" y="245" width="0.0835%" height="15" fill="rgb(250,156,29)" fg:x="853" fg:w="1"/><text x="71.4520%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (1 samples, 0.08%)</title><rect x="71.2020%" y="229" width="0.0835%" height="15" fill="rgb(216,193,19)" fg:x="853" fg:w="1"/><text x="71.4520%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.25%)</title><rect x="71.2855%" y="245" width="0.2504%" height="15" fill="rgb(216,135,14)" fg:x="854" fg:w="3"/><text x="71.5355%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (3 samples, 0.25%)</title><rect x="71.2855%" y="229" width="0.2504%" height="15" fill="rgb(241,47,5)" fg:x="854" fg:w="3"/><text x="71.5355%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (1 samples, 0.08%)</title><rect x="71.4524%" y="213" width="0.0835%" height="15" fill="rgb(233,42,35)" fg:x="856" fg:w="1"/><text x="71.7024%" y="223.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (2 samples, 0.17%)</title><rect x="71.5359%" y="245" width="0.1669%" height="15" fill="rgb(231,13,6)" fg:x="857" fg:w="2"/><text x="71.7859%" y="255.50"></text></g><g><title>bulk`tokio::runtime::park::CachedParkThread::block_on::_{{closure}} (866 samples, 72.29%)</title><rect x="0.4174%" y="261" width="72.2871%" height="15" fill="rgb(207,181,40)" fg:x="5" fg:w="866"/><text x="0.6674%" y="271.50">bulk`tokio::runtime::park::CachedParkThread::block_on::_{{closure}}</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (12 samples, 1.00%)</title><rect x="71.7028%" y="245" width="1.0017%" height="15" fill="rgb(254,173,49)" fg:x="859" fg:w="12"/><text x="71.9528%" y="255.50"></text></g><g><title>bulk`tokio::runtime::park::CachedParkThread::block_on (884 samples, 73.79%)</title><rect x="0.0835%" y="277" width="73.7896%" height="15" fill="rgb(221,1,38)" fg:x="1" fg:w="884"/><text x="0.3335%" y="287.50">bulk`tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>bulk`tokio::runtime::park::Inner::park (14 samples, 1.17%)</title><rect x="72.7045%" y="261" width="1.1686%" height="15" fill="rgb(206,124,46)" fg:x="871" fg:w="14"/><text x="72.9545%" y="271.50"></text></g><g><title>bulk`std::sync::condvar::Condvar::wait (14 samples, 1.17%)</title><rect x="72.7045%" y="245" width="1.1686%" height="15" fill="rgb(249,21,11)" fg:x="871" fg:w="14"/><text x="72.9545%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (14 samples, 1.17%)</title><rect x="72.7045%" y="229" width="1.1686%" height="15" fill="rgb(222,201,40)" fg:x="871" fg:w="14"/><text x="72.9545%" y="239.50"></text></g><g><title>dyld`start (886 samples, 73.96%)</title><rect x="0.0000%" y="405" width="73.9566%" height="15" fill="rgb(235,61,29)" fg:x="0" fg:w="886"/><text x="0.2500%" y="415.50">dyld`start</text></g><g><title>bulk`main (886 samples, 73.96%)</title><rect x="0.0000%" y="389" width="73.9566%" height="15" fill="rgb(219,207,3)" fg:x="0" fg:w="886"/><text x="0.2500%" y="399.50">bulk`main</text></g><g><title>bulk`std::rt::lang_start_internal (886 samples, 73.96%)</title><rect x="0.0000%" y="373" width="73.9566%" height="15" fill="rgb(222,56,46)" fg:x="0" fg:w="886"/><text x="0.2500%" y="383.50">bulk`std::rt::lang_start_internal</text></g><g><title>bulk`std::rt::lang_start::_{{closure}} (886 samples, 73.96%)</title><rect x="0.0000%" y="357" width="73.9566%" height="15" fill="rgb(239,76,54)" fg:x="0" fg:w="886"/><text x="0.2500%" y="367.50">bulk`std::rt::lang_start::_{{closure}}</text></g><g><title>bulk`std::sys_common::backtrace::__rust_begin_short_backtrace (886 samples, 73.96%)</title><rect x="0.0000%" y="341" width="73.9566%" height="15" fill="rgb(231,124,27)" fg:x="0" fg:w="886"/><text x="0.2500%" y="351.50">bulk`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>bulk`bulk::main (886 samples, 73.96%)</title><rect x="0.0000%" y="325" width="73.9566%" height="15" fill="rgb(249,195,6)" fg:x="0" fg:w="886"/><text x="0.2500%" y="335.50">bulk`bulk::main</text></g><g><title>bulk`tokio::runtime::runtime::Runtime::block_on (885 samples, 73.87%)</title><rect x="0.0835%" y="309" width="73.8731%" height="15" fill="rgb(237,174,47)" fg:x="1" fg:w="885"/><text x="0.3335%" y="319.50">bulk`tokio::runtime::runtime::Runtime::block_on</text></g><g><title>bulk`tokio::runtime::context::runtime::enter_runtime (885 samples, 73.87%)</title><rect x="0.0835%" y="293" width="73.8731%" height="15" fill="rgb(206,201,31)" fg:x="1" fg:w="885"/><text x="0.3335%" y="303.50">bulk`tokio::runtime::context::runtime::enter_runtime</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (1 samples, 0.08%)</title><rect x="73.8731%" y="277" width="0.0835%" height="15" fill="rgb(231,57,52)" fg:x="885" fg:w="1"/><text x="74.1231%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_terminate (1 samples, 0.08%)</title><rect x="73.9566%" y="405" width="0.0835%" height="15" fill="rgb(248,177,22)" fg:x="886" fg:w="1"/><text x="74.2066%" y="415.50"></text></g><g><title>bulk`std::panicking::try (1 samples, 0.08%)</title><rect x="74.6244%" y="309" width="0.0835%" height="15" fill="rgb(215,211,37)" fg:x="894" fg:w="1"/><text x="74.8744%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (2 samples, 0.17%)</title><rect x="74.7913%" y="245" width="0.1669%" height="15" fill="rgb(241,128,51)" fg:x="896" fg:w="2"/><text x="75.0413%" y="255.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (34 samples, 2.84%)</title><rect x="74.7078%" y="261" width="2.8381%" height="15" fill="rgb(227,165,31)" fg:x="895" fg:w="34"/><text x="74.9578%" y="271.50">li..</text></g><g><title>libsystem_kernel.dylib`mach_timebase_info (31 samples, 2.59%)</title><rect x="74.9583%" y="245" width="2.5876%" height="15" fill="rgb(228,167,24)" fg:x="898" fg:w="31"/><text x="75.2083%" y="255.50">li..</text></g><g><title>bulk`std::sys::pal::unix::time::Timespec::now (35 samples, 2.92%)</title><rect x="74.7078%" y="293" width="2.9215%" height="15" fill="rgb(228,143,12)" fg:x="895" fg:w="35"/><text x="74.9578%" y="303.50">bu..</text></g><g><title>libsystem_c.dylib`clock_gettime (35 samples, 2.92%)</title><rect x="74.7078%" y="277" width="2.9215%" height="15" fill="rgb(249,149,8)" fg:x="895" fg:w="35"/><text x="74.9578%" y="287.50">li..</text></g><g><title>libsystem_kernel.dylib`__commpage_gettimeofday (1 samples, 0.08%)</title><rect x="77.5459%" y="261" width="0.0835%" height="15" fill="rgb(243,35,44)" fg:x="929" fg:w="1"/><text x="77.7959%" y="271.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (1 samples, 0.08%)</title><rect x="77.6294%" y="293" width="0.0835%" height="15" fill="rgb(246,89,9)" fg:x="930" fg:w="1"/><text x="77.8794%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__gettimeofday (10 samples, 0.83%)</title><rect x="77.7129%" y="293" width="0.8347%" height="15" fill="rgb(233,213,13)" fg:x="931" fg:w="10"/><text x="77.9629%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (53 samples, 4.42%)</title><rect x="78.5476%" y="293" width="4.4240%" height="15" fill="rgb(233,141,41)" fg:x="941" fg:w="53"/><text x="78.7976%" y="303.50">libsy..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (1 samples, 0.08%)</title><rect x="83.2220%" y="277" width="0.0835%" height="15" fill="rgb(239,167,4)" fg:x="997" fg:w="1"/><text x="83.4720%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (1 samples, 0.08%)</title><rect x="83.2220%" y="261" width="0.0835%" height="15" fill="rgb(209,217,16)" fg:x="997" fg:w="1"/><text x="83.4720%" y="271.50"></text></g><g><title>bulk`std::sys::pal::unix::locks::pthread_condvar::Condvar::wait_timeout (104 samples, 8.68%)</title><rect x="74.7078%" y="309" width="8.6811%" height="15" fill="rgb(219,88,35)" fg:x="895" fg:w="104"/><text x="74.9578%" y="319.50">bulk`std::sy..</text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (5 samples, 0.42%)</title><rect x="82.9716%" y="293" width="0.4174%" height="15" fill="rgb(220,193,23)" fg:x="994" fg:w="5"/><text x="83.2216%" y="303.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.08%)</title><rect x="83.3055%" y="277" width="0.0835%" height="15" fill="rgb(230,90,52)" fg:x="998" fg:w="1"/><text x="83.5555%" y="287.50"></text></g><g><title>bulk`std::fs::File::sync_all (4 samples, 0.33%)</title><rect x="83.6394%" y="261" width="0.3339%" height="15" fill="rgb(252,106,19)" fg:x="1002" fg:w="4"/><text x="83.8894%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__fcntl (4 samples, 0.33%)</title><rect x="83.6394%" y="245" width="0.3339%" height="15" fill="rgb(206,74,20)" fg:x="1002" fg:w="4"/><text x="83.8894%" y="255.50"></text></g><g><title>bulk`std::fs::OpenOptions::_open (7 samples, 0.58%)</title><rect x="83.9733%" y="261" width="0.5843%" height="15" fill="rgb(230,138,44)" fg:x="1006" fg:w="7"/><text x="84.2233%" y="271.50"></text></g><g><title>bulk`std::sys::pal::unix::fs::File::open_c (7 samples, 0.58%)</title><rect x="83.9733%" y="245" width="0.5843%" height="15" fill="rgb(235,182,43)" fg:x="1006" fg:w="7"/><text x="84.2233%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__open (6 samples, 0.50%)</title><rect x="84.0568%" y="229" width="0.5008%" height="15" fill="rgb(242,16,51)" fg:x="1007" fg:w="6"/><text x="84.3068%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__msync (3 samples, 0.25%)</title><rect x="84.5576%" y="261" width="0.2504%" height="15" fill="rgb(248,9,4)" fg:x="1013" fg:w="3"/><text x="84.8076%" y="271.50"></text></g><g><title>bulk`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (17 samples, 1.42%)</title><rect x="83.6394%" y="277" width="1.4190%" height="15" fill="rgb(210,31,22)" fg:x="1002" fg:w="17"/><text x="83.8894%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`ftruncate (3 samples, 0.25%)</title><rect x="84.8080%" y="261" width="0.2504%" height="15" fill="rgb(239,54,39)" fg:x="1016" fg:w="3"/><text x="85.0580%" y="271.50"></text></g><g><title>bulk`std::io::Write::write_all (128 samples, 10.68%)</title><rect x="85.0584%" y="277" width="10.6845%" height="15" fill="rgb(230,99,41)" fg:x="1019" fg:w="128"/><text x="85.3084%" y="287.50">bulk`std::io::Wr..</text></g><g><title>libsystem_kernel.dylib`write (127 samples, 10.60%)</title><rect x="85.1419%" y="261" width="10.6010%" height="15" fill="rgb(253,106,12)" fg:x="1020" fg:w="127"/><text x="85.3919%" y="271.50">libsystem_kerne..</text></g><g><title>bulk`tokio::io::blocking::Buf::read_from (13 samples, 1.09%)</title><rect x="95.7429%" y="277" width="1.0851%" height="15" fill="rgb(213,46,41)" fg:x="1147" fg:w="13"/><text x="95.9929%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`read (13 samples, 1.09%)</title><rect x="95.7429%" y="261" width="1.0851%" height="15" fill="rgb(215,133,35)" fg:x="1147" fg:w="13"/><text x="95.9929%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (2 samples, 0.17%)</title><rect x="96.8280%" y="197" width="0.1669%" height="15" fill="rgb(213,28,5)" fg:x="1160" fg:w="2"/><text x="97.0780%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (2 samples, 0.17%)</title><rect x="96.8280%" y="181" width="0.1669%" height="15" fill="rgb(215,77,49)" fg:x="1160" fg:w="2"/><text x="97.0780%" y="191.50"></text></g><g><title>bulk`tokio::runtime::scheduler::multi_thread::worker::run (5 samples, 0.42%)</title><rect x="96.8280%" y="277" width="0.4174%" height="15" fill="rgb(248,100,22)" fg:x="1160" fg:w="5"/><text x="97.0780%" y="287.50"></text></g><g><title>bulk`tokio::runtime::context::runtime::enter_runtime (5 samples, 0.42%)</title><rect x="96.8280%" y="261" width="0.4174%" height="15" fill="rgb(208,67,9)" fg:x="1160" fg:w="5"/><text x="97.0780%" y="271.50"></text></g><g><title>bulk`tokio::runtime::context::set_scheduler (5 samples, 0.42%)</title><rect x="96.8280%" y="245" width="0.4174%" height="15" fill="rgb(219,133,21)" fg:x="1160" fg:w="5"/><text x="97.0780%" y="255.50"></text></g><g><title>bulk`tokio::runtime::scheduler::multi_thread::worker::Context::run (5 samples, 0.42%)</title><rect x="96.8280%" y="229" width="0.4174%" height="15" fill="rgb(246,46,29)" fg:x="1160" fg:w="5"/><text x="97.0780%" y="239.50"></text></g><g><title>bulk`tokio::runtime::task::list::OwnedTasks&lt;S&gt;::close_and_shutdown_all (5 samples, 0.42%)</title><rect x="96.8280%" y="213" width="0.4174%" height="15" fill="rgb(246,185,52)" fg:x="1160" fg:w="5"/><text x="97.0780%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (3 samples, 0.25%)</title><rect x="96.9950%" y="197" width="0.2504%" height="15" fill="rgb(252,136,11)" fg:x="1162" fg:w="3"/><text x="97.2450%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (3 samples, 0.25%)</title><rect x="96.9950%" y="181" width="0.2504%" height="15" fill="rgb(219,138,53)" fg:x="1162" fg:w="3"/><text x="97.2450%" y="191.50"></text></g><g><title>bulk`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (174 samples, 14.52%)</title><rect x="83.3890%" y="293" width="14.5242%" height="15" fill="rgb(211,51,23)" fg:x="999" fg:w="174"/><text x="83.6390%" y="303.50">bulk`tokio::runtime::t..</text></g><g><title>libsystem_kernel.dylib`__lseek (8 samples, 0.67%)</title><rect x="97.2454%" y="277" width="0.6678%" height="15" fill="rgb(247,221,28)" fg:x="1165" fg:w="8"/><text x="97.4954%" y="287.50"></text></g><g><title>bulk`tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (16 samples, 1.34%)</title><rect x="97.9132%" y="293" width="1.3356%" height="15" fill="rgb(251,222,45)" fg:x="1173" fg:w="16"/><text x="98.1632%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (16 samples, 1.34%)</title><rect x="97.9132%" y="277" width="1.3356%" height="15" fill="rgb(217,162,53)" fg:x="1173" fg:w="16"/><text x="98.1632%" y="287.50"></text></g><g><title>bulk`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (191 samples, 15.94%)</title><rect x="83.3890%" y="309" width="15.9432%" height="15" fill="rgb(229,93,14)" fg:x="999" fg:w="191"/><text x="83.6390%" y="319.50">bulk`tokio::runtime::task..</text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.08%)</title><rect x="99.2487%" y="293" width="0.0835%" height="15" fill="rgb(209,67,49)" fg:x="1189" fg:w="1"/><text x="99.4987%" y="303.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (1 samples, 0.08%)</title><rect x="99.3322%" y="309" width="0.0835%" height="15" fill="rgb(213,87,29)" fg:x="1190" fg:w="1"/><text x="99.5822%" y="319.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (1 samples, 0.08%)</title><rect x="99.4157%" y="309" width="0.0835%" height="15" fill="rgb(205,151,52)" fg:x="1191" fg:w="1"/><text x="99.6657%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (1 samples, 0.08%)</title><rect x="99.4157%" y="293" width="0.0835%" height="15" fill="rgb(253,215,39)" fg:x="1191" fg:w="1"/><text x="99.6657%" y="303.50"></text></g><g><title>bulk`std::sys::pal::unix::thread::Thread::new::thread_start (306 samples, 25.54%)</title><rect x="74.0401%" y="373" width="25.5426%" height="15" fill="rgb(221,220,41)" fg:x="887" fg:w="306"/><text x="74.2901%" y="383.50">bulk`std::sys::pal::unix::thread::Thread:..</text></g><g><title>bulk`core::ops::function::FnOnce::call_once{{vtable.shim}} (306 samples, 25.54%)</title><rect x="74.0401%" y="357" width="25.5426%" height="15" fill="rgb(218,133,21)" fg:x="887" fg:w="306"/><text x="74.2901%" y="367.50">bulk`core::ops::function::FnOnce::call_on..</text></g><g><title>bulk`std::sys_common::backtrace::__rust_begin_short_backtrace (306 samples, 25.54%)</title><rect x="74.0401%" y="341" width="25.5426%" height="15" fill="rgb(221,193,43)" fg:x="887" fg:w="306"/><text x="74.2901%" y="351.50">bulk`std::sys_common::backtrace::__rust_b..</text></g><g><title>bulk`tokio::runtime::blocking::pool::Inner::run (306 samples, 25.54%)</title><rect x="74.0401%" y="325" width="25.5426%" height="15" fill="rgb(240,128,52)" fg:x="887" fg:w="306"/><text x="74.2901%" y="335.50">bulk`tokio::runtime::blocking::pool::Inne..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (1 samples, 0.08%)</title><rect x="99.4992%" y="309" width="0.0835%" height="15" fill="rgb(253,114,12)" fg:x="1192" fg:w="1"/><text x="99.7492%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (1 samples, 0.08%)</title><rect x="99.4992%" y="293" width="0.0835%" height="15" fill="rgb(215,223,47)" fg:x="1192" fg:w="1"/><text x="99.7492%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__munmap (2 samples, 0.17%)</title><rect x="99.5826%" y="373" width="0.1669%" height="15" fill="rgb(248,225,23)" fg:x="1193" fg:w="2"/><text x="99.8326%" y="383.50"></text></g><g><title>all (1,198 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(250,108,0)" fg:x="0" fg:w="1198"/><text x="0.2500%" y="431.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (311 samples, 25.96%)</title><rect x="74.0401%" y="405" width="25.9599%" height="15" fill="rgb(228,208,7)" fg:x="887" fg:w="311"/><text x="74.2901%" y="415.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (311 samples, 25.96%)</title><rect x="74.0401%" y="389" width="25.9599%" height="15" fill="rgb(244,45,10)" fg:x="887" fg:w="311"/><text x="74.2901%" y="399.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_exit (3 samples, 0.25%)</title><rect x="99.7496%" y="373" width="0.2504%" height="15" fill="rgb(207,125,25)" fg:x="1195" fg:w="3"/><text x="99.9996%" y="383.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_terminate (3 samples, 0.25%)</title><rect x="99.7496%" y="357" width="0.2504%" height="15" fill="rgb(210,195,18)" fg:x="1195" fg:w="3"/><text x="99.9996%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_terminate (3 samples, 0.25%)</title><rect x="99.7496%" y="341" width="0.2504%" height="15" fill="rgb(249,80,12)" fg:x="1195" fg:w="3"/><text x="99.9996%" y="351.50"></text></g></svg></svg>