syntax = "proto3";

package eventstore;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

// Append Events
message AppendToStreamRequest {
    string stream_id = 1;
    ExpectedVersion expected_version = 2;
    repeated NewEvent events = 3;
}

message NewEvent {
    string event_name = 1;
    bytes event_data = 2;
    bytes metadata = 3;
}

message Event {
    uint64 id = 1;
    string stream_id = 2;
    uint64 stream_version = 3;
    string event_name = 4;
    bytes event_data = 5;
    bytes metadata = 6;
    google.protobuf.Timestamp timestamp = 7;
}

message ExpectedVersion {
    oneof version {
        google.protobuf.Empty any = 1;
        google.protobuf.Empty stream_exists = 2;
        google.protobuf.Empty no_stream = 3;
        uint64 exact = 4;
    }
}

// Get Stream Events
message GetStreamEventsRequest {
    string stream_id = 1;
    uint64 stream_version = 2;
}

// Subscribe
message SubscribeRequest {
    oneof start_from {
        string subscriber_id = 1;
        uint64 event_id = 2;
    }
}

message EventBatch {
    repeated Event events = 1;
}

// Acknowledge
message AcknowledgeRequest {
    string subscriber_id = 1;
    uint64 last_event_id = 2;
}

// Service
service EventStore {
    rpc AppendToStream(AppendToStreamRequest) returns (google.protobuf.Empty);
    rpc GetStreamEvents(GetStreamEventsRequest) returns (stream Event);
    rpc Subscribe(SubscribeRequest) returns (stream EventBatch);
    rpc Acknowledge(AcknowledgeRequest) returns (google.protobuf.Empty);
}
